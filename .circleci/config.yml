version: 2.1

commands:
  check-if-tests-needed:
    steps:
      - run:
          name: Check if tests need to run
          command: |
            # If we're on main branch, always run tests
            if [ "${CIRCLE_BRANCH}" = "main" ]; then
              echo "On main branch - running all tests"
              exit 0
            fi
            
            # Fetch all the branches
            git fetch origin
            
            # Get list of changed files between current branch and main
            CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
            
            # Check if any relevant files changed
            echo "$CHANGED_FILES" | grep -q -E "^(src/|tests/|tests_aws/|.circleci/|pypproject.toml)" || {
              echo "No changes in src/, tests/, tests_aws/, or .circleci directories. Skipping tests."
              circleci step halt
            }

  pip-install-deps:
    steps:
      - run:
          name: Install Python Dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install 'wheel==0.45.1'
            pip install -r requirements.txt

  pip-install-tests-deps:
    parameters:
      requirements:
        default: "tests/requirements.txt"
        type: string
    steps:
      - run:
          name: Install Python Tests Dependencies
          command: |
            . venv/bin/activate
            pip install -r <<parameters.requirements>>

  run-tests-with-coverage-report:
    parameters:
      cassandra:
        default: ""
        type: string
      gevent:
        default: ""
        type: string
      kafka:
        default: ""
        type: string
      tests:
        default: "tests"
        type: string
    steps:
      - run:
          name: Run Tests With Coverage Report
          environment:
            CASSANDRA_TEST: "<<parameters.cassandra>>"
            GEVENT_TEST: "<<parameters.gevent>>"
            KAFKA_TEST: "<<parameters.kafka>>"
          command: |
            . venv/bin/activate
            coverage run --source=instana -m pytest -v --junitxml=test-results <<parameters.tests>>
            coverage report -m
            coverage html
            mkdir coverage_results
            cp -R .coverage coverage_results/.coverage.${CIRCLE_BUILD_NUM}
            cd coverage_results
      - persist_to_workspace:
          root: .
          paths:
            - coverage_results

  store-pytest-results:
    steps:
      - store_test_results:
          path: test-results
  
  run_sonarqube:
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run SonarQube to report the coverage
          command: |
            python -m venv venv
            . venv/bin/activate
            
            pip install --upgrade pip coverage
            coverage combine ./coverage_results
            coverage xml -i

            PR_NUMBER=$(echo ${CIRCLE_PULL_REQUEST} | sed 's/.*\///')
            SONAR_TOKEN=${SONAR_TOKEN}

            pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ pysonar-scanner
            export SONAR_SCANNER_OPTS="-server"
            
            if [[ -n "${PR_NUMBER}" ]]; then
              pysonar-scanner \
                -Dsonar.organization=instana \
                -Dsonar.projectKey=instana_python-sensor \
                -Dsonar.host.url="${SONARQUBE_URL}" \
                -Dsonar.pullrequest.key="${PR_NUMBER}" \
                -Dsonar.pullrequest.branch="${CIRCLE_BRANCH}"
            else
              pysonar-scanner \
                -Dsonar.organization=instana \
                -Dsonar.projectKey=instana_python-sensor \
                -Dsonar.host.url="${SONARQUBE_URL}" \
                -Dsonar.branch.name="${CIRCLE_BRANCH}"
            fi
      - store_artifacts:
          path: htmlcov

  store-coverage-report:
    steps:
      - store_artifacts:
          path: htmlcov

jobs:
  python3x:
    parameters:
      py-version:
        type: string
    docker:
      - image: public.ecr.aws/docker/library/python:<<parameters.py-version>>
      - image: public.ecr.aws/docker/library/postgres:16.2-bookworm
        environment:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: passw0rd
          POSTGRES_DB: instana_test_db
      - image: public.ecr.aws/docker/library/mariadb:11.3.2
        environment:
          MYSQL_ROOT_PASSWORD: passw0rd
          MYSQL_DATABASE: instana_test_db
      - image: public.ecr.aws/docker/library/redis:7.2.4-bookworm
      - image: public.ecr.aws/docker/library/rabbitmq:3.13.0
      - image: public.ecr.aws/docker/library/mongo:7.0.6
      - image: quay.io/thekevjames/gcloud-pubsub-emulator:latest
        environment:
          PUBSUB_EMULATOR_HOST: 0.0.0.0:8681
          PUBSUB_PROJECT1: test-project,test-topic
    working_directory: ~/repo
    steps:
      - checkout
      - check-if-tests-needed
      - pip-install-deps
      - pip-install-tests-deps
      - run-tests-with-coverage-report
      - store-pytest-results
      - store-coverage-report

  python314:
    docker:
      - image: ghcr.io/pvital/pvital-py3.14.0:latest
      - image: public.ecr.aws/docker/library/postgres:16.2-bookworm
        environment:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: passw0rd
          POSTGRES_DB: instana_test_db
      - image: public.ecr.aws/docker/library/mariadb:11.3.2
        environment:
          MYSQL_ROOT_PASSWORD: passw0rd
          MYSQL_DATABASE: instana_test_db
      - image: public.ecr.aws/docker/library/redis:7.2.4-bookworm
      - image: public.ecr.aws/docker/library/rabbitmq:3.13.0
      - image: public.ecr.aws/docker/library/mongo:7.0.6
      - image: quay.io/thekevjames/gcloud-pubsub-emulator:latest
        environment:
          PUBSUB_EMULATOR_HOST: 0.0.0.0:8681
          PUBSUB_PROJECT1: test-project,test-topic
    working_directory: ~/repo
    steps:
      - checkout
      - check-if-tests-needed
      - run: |
          cp -a /root/base/venv ./venv
          . venv/bin/activate
          pip install 'wheel==0.45.1'
          pip install -r requirements.txt
      - run-tests-with-coverage-report
      - store-pytest-results
      - store-coverage-report

  py39cassandra:
    docker:
      - image: public.ecr.aws/docker/library/python:3.9
      - image: public.ecr.aws/docker/library/cassandra:3.11.16-jammy
        environment:
          MAX_HEAP_SIZE: 2048m
          HEAP_NEWSIZE: 512m
    working_directory: ~/repo
    steps:
      - checkout
      - check-if-tests-needed
      - pip-install-deps
      - pip-install-tests-deps:
          requirements: "tests/requirements-cassandra.txt"
      - run-tests-with-coverage-report:
          cassandra: "true"
          tests: "tests/clients/test_cassandra-driver.py"
      - store-pytest-results
      - store-coverage-report

  py39gevent:
    docker:
      - image: public.ecr.aws/docker/library/python:3.9
    working_directory: ~/repo
    steps:
      - checkout
      - check-if-tests-needed
      - pip-install-deps
      - pip-install-tests-deps:
          requirements: "tests/requirements-gevent-starlette.txt"
      - run-tests-with-coverage-report:
          gevent: "true"
          tests: "tests/frameworks/test_gevent.py"
      - store-pytest-results
      - store-coverage-report

  py312aws:
    docker:
      - image: public.ecr.aws/docker/library/python:3.12
    working_directory: ~/repo
    steps:
      - checkout
      - check-if-tests-needed
      - pip-install-deps
      - pip-install-tests-deps:
          requirements: "tests/requirements-aws.txt"
      - run-tests-with-coverage-report:
          tests: "tests_aws"
      - store-pytest-results
      - store-coverage-report

  py313kafka:
    docker:
      - image: public.ecr.aws/docker/library/python:3.13
      - image: public.ecr.aws/ubuntu/zookeeper:3.1-22.04_edge
        environment:
          TZ: UTC
      - image: public.ecr.aws/ubuntu/kafka:3.1-22.04_edge
        environment:
          TZ: UTC
          ZOOKEEPER_HOST: localhost
          ZOOKEEPER_PORT: 2181
        command:
          - /opt/kafka/config/server.properties
          - --override
          - listeners=INTERNAL://0.0.0.0:9093,EXTERNAL://0.0.0.0:9094
          - --override
          - advertised.listeners=INTERNAL://localhost:9093,EXTERNAL://localhost:9094
          - --override
          - listener.security.protocol.map=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
          - --override
          - inter.broker.listener.name=INTERNAL
          - --override
          - broker.id=1
          - --override
          - offsets.topic.replication.factor=1
          - --override
          - transaction.state.log.replication.factor=1
          - --override
          - transaction.state.log.min.isr=1
          - --override
          - auto.create.topics.enable=true
    working_directory: ~/repo
    steps:
      - checkout
      - check-if-tests-needed
      - pip-install-deps
      - pip-install-tests-deps:
          requirements: "tests/requirements-kafka.txt"
      - run-tests-with-coverage-report:
          kafka: "true"
          tests: "tests/clients/kafka/test*.py"
      - store-pytest-results
      - store-coverage-report

  autowrapt:
    parameters:
      py-version:
        type: string
    docker:
      - image: public.ecr.aws/docker/library/python:<<parameters.py-version>>
        environment:
          AUTOWRAPT_BOOTSTRAP: instana
    working_directory: ~/repo
    steps:
      - checkout
      - check-if-tests-needed
      - pip-install-deps
      - pip-install-tests-deps:
          requirements: "tests/requirements-minimal.txt"
      - run-tests-with-coverage-report:
          tests: "tests_autowrapt"
      - store-pytest-results
      - store-coverage-report

  final_job:
    docker:
      - image: public.ecr.aws/docker/library/python:3.13
    working_directory: ~/repo
    steps:
      - checkout
      - check-if-tests-needed
      - run_sonarqube

workflows:
  tests:
    max_auto_reruns: 2
    jobs:
      - python3x:
          matrix:
            parameters:
              py-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
      - python314
      - py39cassandra
      - py39gevent
      - py312aws
      - py313kafka
      - autowrapt:
          matrix:
            parameters:
              py-version: ["3.11", "3.12", "3.13"]
      - final_job:
          requires:
            - python3x
            # Uncomment the following when giving real support to 3.14
            # - python314
            - py39cassandra
            - py39gevent
            - py312aws
            - py313kafka
            - autowrapt
