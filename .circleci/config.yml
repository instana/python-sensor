version: 2.1

# More about orbs: https://circleci.com/docs/2.0/using-orbs/
# orbs:
#   ruby: circleci/ruby@1.1.2

commands:
  check-if-tests-needed:
    steps:
      - run:
          name: Check if tests need to run
          command: |
            # If we're on main branch, always run tests
            if [ "${CIRCLE_BRANCH}" = "main" ]; then
              echo "On main branch - running all tests"
              exit 0
            fi
            
            # Fetch all the branches
            git fetch origin
            
            # Get list of changed files between current branch and main
            CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
            
            # Check if any relevant files changed
            echo "$CHANGED_FILES" | grep -q -E "^(src/|tests/|tests_aws/|.circleci/)" || {
              echo "No changes in src/, tests/, tests_aws/, or .circleci directories. Skipping tests."
              circleci step halt
            }

  pip-install-deps:
    parameters:
      requirements:
        default: "tests/requirements.txt"
        type: string
    steps:
      - run:
          name: Install Python Dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install 'wheel==0.45.1'
            pip install -r requirements.txt
            pip install -r <<parameters.requirements>>

  run-tests-with-coverage-report:
    parameters:
      cassandra:
        default: ""
        type: string
      gevent:
        default: ""
        type: string
      kafka:
        default: ""
        type: string
      tests:
        default: "tests"
        type: string
    steps:
      - run:
          name: Run Tests With Coverage Report
          environment:
            CASSANDRA_TEST: "<<parameters.cassandra>>"
            GEVENT_STARLETTE_TEST: "<<parameters.gevent>>"
            KAFKA_TEST: "<<parameters.kafka>>"
          command: |
            . venv/bin/activate
            coverage run --source=instana -m pytest -v --junitxml=test-results <<parameters.tests>>
            coverage report -m
            coverage html
            mkdir coverage_results
            cp -R .coverage coverage_results/.coverage.${CIRCLE_BUILD_NUM}
            cd coverage_results
      - persist_to_workspace:
          root: .
          paths:
            - coverage_results

  store-pytest-results:
    steps:
      - store_test_results:
          path: test-results
  
  run_sonarqube:
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install Java
          command: |
            sudo apt-get update
            sudo apt-get install openjdk-11-jdk
      - run:
          name: Run SonarQube to report the coverage
          command: |
            . venv/bin/activate
            coverage combine ./coverage_results
            coverage xml -i
            wget -O /tmp/sonar-scanner-cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.1.3023.zip
            unzip -d /tmp /tmp/sonar-scanner-cli.zip
            if [[ -n "${CIRCLE_PR_NUMBER}" ]]; then
              /tmp/sonar-scanner-4.8.1.3023/bin/sonar-scanner \
                -Dsonar.host.url=${SONARQUBE_URL} \
                -Dsonar.login="${SONARQUBE_LOGIN}" \
                -Dsonar.pullrequest.key="${CIRCLE_PR_NUMBER}" \
                -Dsonar.pullrequest.branch="${CIRCLE_BRANCH}"
            else
              /tmp/sonar-scanner-4.8.1.3023/bin/sonar-scanner \
                -Dsonar.host.url=${SONARQUBE_URL} \
                -Dsonar.login="${SONARQUBE_LOGIN}" \
                -Dsonar.branch.name="${CIRCLE_BRANCH}"
            fi
      - store_artifacts:
          path: htmlcov

  store-coverage-report:
    steps:
      - store_artifacts:
          path: htmlcov

jobs:
  python38:
    docker:
      - image: public.ecr.aws/docker/library/python:3.8
      - image: public.ecr.aws/docker/library/postgres:16.2-bookworm
        environment:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: passw0rd
          POSTGRES_DB: instana_test_db
      - image: public.ecr.aws/docker/library/mariadb:11.3.2
        environment:
          MYSQL_ROOT_PASSWORD: passw0rd
          MYSQL_DATABASE: instana_test_db
      - image: public.ecr.aws/docker/library/redis:7.2.4-bookworm
      - image: public.ecr.aws/docker/library/rabbitmq:3.13.0
      - image: public.ecr.aws/docker/library/mongo:7.0.6
      - image: quay.io/thekevjames/gcloud-pubsub-emulator:latest
        environment:
          PUBSUB_EMULATOR_HOST: 0.0.0.0:8681
          PUBSUB_PROJECT1: test-project,test-topic
    working_directory: ~/repo
    steps:
      - checkout
      - check-if-tests-needed
      - pip-install-deps
      - run-tests-with-coverage-report
      - store-pytest-results
      - store-coverage-report

  python39:
    docker:
      - image: public.ecr.aws/docker/library/python:3.9
      - image: public.ecr.aws/docker/library/postgres:16.2-bookworm
        environment:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: passw0rd
          POSTGRES_DB: instana_test_db
      - image: public.ecr.aws/docker/library/mariadb:11.3.2
        environment:
          MYSQL_ROOT_PASSWORD: passw0rd
          MYSQL_DATABASE: instana_test_db
      - image: public.ecr.aws/docker/library/redis:7.2.4-bookworm
      - image: public.ecr.aws/docker/library/rabbitmq:3.13.0
      - image: public.ecr.aws/docker/library/mongo:7.0.6
      - image: quay.io/thekevjames/gcloud-pubsub-emulator:latest
        environment:
          PUBSUB_EMULATOR_HOST: 0.0.0.0:8681
          PUBSUB_PROJECT1: test-project,test-topic
    working_directory: ~/repo
    steps:
      - checkout
      - check-if-tests-needed
      - pip-install-deps
      - run-tests-with-coverage-report
      - store-pytest-results
      - store-coverage-report

  python310:
    docker:
      - image: public.ecr.aws/docker/library/python:3.10
      - image: public.ecr.aws/docker/library/postgres:16.2-bookworm
        environment:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: passw0rd
          POSTGRES_DB: instana_test_db
      - image: public.ecr.aws/docker/library/mariadb:11.3.2
        environment:
          MYSQL_ROOT_PASSWORD: passw0rd
          MYSQL_DATABASE: instana_test_db
      - image: public.ecr.aws/docker/library/redis:7.2.4-bookworm
      - image: public.ecr.aws/docker/library/rabbitmq:3.13.0
      - image: public.ecr.aws/docker/library/mongo:7.0.6
      - image: quay.io/thekevjames/gcloud-pubsub-emulator:latest
        environment:
          PUBSUB_EMULATOR_HOST: 0.0.0.0:8681
          PUBSUB_PROJECT1: test-project,test-topic
    working_directory: ~/repo
    steps:
      - checkout
      - check-if-tests-needed
      - pip-install-deps:
          requirements: "tests/requirements.txt"
      - run-tests-with-coverage-report
      - store-pytest-results
      - store-coverage-report

  python311:
    docker:
      - image: public.ecr.aws/docker/library/python:3.11
      - image: public.ecr.aws/docker/library/postgres:16.2-bookworm
        environment:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: passw0rd
          POSTGRES_DB: instana_test_db
      - image: public.ecr.aws/docker/library/mariadb:11.3.2
        environment:
          MYSQL_ROOT_PASSWORD: passw0rd
          MYSQL_DATABASE: instana_test_db
      - image: public.ecr.aws/docker/library/redis:7.2.4-bookworm
      - image: public.ecr.aws/docker/library/rabbitmq:3.13.0
      - image: public.ecr.aws/docker/library/mongo:7.0.6
      - image: quay.io/thekevjames/gcloud-pubsub-emulator:latest
        environment:
          PUBSUB_EMULATOR_HOST: 0.0.0.0:8681
          PUBSUB_PROJECT1: test-project,test-topic
    working_directory: ~/repo
    steps:
      - checkout
      - check-if-tests-needed
      - pip-install-deps:
          requirements: "tests/requirements.txt"
      - run-tests-with-coverage-report
      - store-pytest-results
      - store-coverage-report

  python312:
    docker:
      - image: public.ecr.aws/docker/library/python:3.12
      - image: public.ecr.aws/docker/library/postgres:16.2-bookworm
        environment:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: passw0rd
          POSTGRES_DB: instana_test_db
      - image: public.ecr.aws/docker/library/mariadb:11.3.2
        environment:
          MYSQL_ROOT_PASSWORD: passw0rd
          MYSQL_DATABASE: instana_test_db
      - image: public.ecr.aws/docker/library/redis:7.2.4-bookworm
      - image: public.ecr.aws/docker/library/rabbitmq:3.13.0
      - image: public.ecr.aws/docker/library/mongo:7.0.6
      - image: quay.io/thekevjames/gcloud-pubsub-emulator:latest
        environment:
          PUBSUB_EMULATOR_HOST: 0.0.0.0:8681
          PUBSUB_PROJECT1: test-project,test-topic
    working_directory: ~/repo
    steps:
      - checkout
      - check-if-tests-needed
      - pip-install-deps:
          requirements: "tests/requirements.txt"
      - run-tests-with-coverage-report
      - store-pytest-results
      - store-coverage-report

  py312aws:
    docker:
      - image: public.ecr.aws/docker/library/python:3.12
    working_directory: ~/repo
    steps:
      - checkout
      - check-if-tests-needed
      - pip-install-deps:
          requirements: "tests/requirements.txt"
      - run-tests-with-coverage-report:
          tests: "tests_aws"
      - store-pytest-results
      - store-coverage-report

  python313:
    docker:
      - image: public.ecr.aws/docker/library/python:3.13
      - image: public.ecr.aws/docker/library/postgres:16.2-bookworm
        environment:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: passw0rd
          POSTGRES_DB: instana_test_db
      - image: public.ecr.aws/docker/library/mariadb:11.3.2
        environment:
          MYSQL_ROOT_PASSWORD: passw0rd
          MYSQL_DATABASE: instana_test_db
      - image: public.ecr.aws/docker/library/redis:7.2.4-bookworm
      - image: public.ecr.aws/docker/library/rabbitmq:3.13.0
      - image: public.ecr.aws/docker/library/mongo:7.0.6
      - image: quay.io/thekevjames/gcloud-pubsub-emulator:latest
        environment:
          PUBSUB_EMULATOR_HOST: 0.0.0.0:8681
          PUBSUB_PROJECT1: test-project,test-topic
    working_directory: ~/repo
    steps:
      - checkout
      - check-if-tests-needed
      - pip-install-deps:
          requirements: "tests/requirements.txt"
      - run-tests-with-coverage-report
      - store-pytest-results
      - store-coverage-report

  python314:
    docker:
      - image: public.ecr.aws/docker/library/python:3.14.0a7
      - image: public.ecr.aws/docker/library/postgres:16.2-bookworm
        environment:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: passw0rd
          POSTGRES_DB: instana_test_db
      - image: public.ecr.aws/docker/library/mariadb:11.3.2
        environment:
          MYSQL_ROOT_PASSWORD: passw0rd
          MYSQL_DATABASE: instana_test_db
      - image: public.ecr.aws/docker/library/redis:7.2.4-bookworm
      - image: public.ecr.aws/docker/library/rabbitmq:3.13.0
      - image: public.ecr.aws/docker/library/mongo:7.0.6
      - image: quay.io/thekevjames/gcloud-pubsub-emulator:latest
        environment:
          PUBSUB_EMULATOR_HOST: 0.0.0.0:8681
          PUBSUB_PROJECT1: test-project,test-topic
    working_directory: ~/repo
    steps:
      - checkout
      - check-if-tests-needed
      - pip-install-deps:
          requirements: "tests/requirements-pre314.txt"
      - run-tests-with-coverage-report
      - store-pytest-results
      - store-coverage-report

  py39cassandra:
    docker:
      - image: public.ecr.aws/docker/library/python:3.9
      - image: public.ecr.aws/docker/library/cassandra:3.11.16-jammy
        environment:
          MAX_HEAP_SIZE: 2048m
          HEAP_NEWSIZE: 512m
    working_directory: ~/repo
    steps:
      - checkout
      - check-if-tests-needed
      - pip-install-deps:
          requirements: "tests/requirements-cassandra.txt"
      - run-tests-with-coverage-report:
          cassandra: "true"
          tests: "tests/clients/test_cassandra-driver.py"
      - store-pytest-results
      - store-coverage-report

  final_job:
    docker:
      - image: public.ecr.aws/docker/library/python:3.9
    working_directory: ~/repo
    steps:
      - checkout
      - check-if-tests-needed
      - pip-install-deps:
            requirements: "tests/requirements.txt"
      - store-pytest-results
      # - run_sonarqube

  py39gevent_starlette:
    docker:
      - image: public.ecr.aws/docker/library/python:3.9
    working_directory: ~/repo
    steps:
      - checkout
      - check-if-tests-needed
      - pip-install-deps:
          requirements: "tests/requirements-gevent-starlette.txt"
      - run-tests-with-coverage-report:
          # TODO: uncomment once gevent instrumentation is done
          # gevent: "true"
          # tests: "tests/frameworks/test_gevent.py tests/frameworks/test_starlette.py"
          tests: "tests/frameworks/test_starlette.py"
      - store-pytest-results
      - store-coverage-report

  py312kafka:
    docker:
      - image: public.ecr.aws/docker/library/python:3.12
      - image: public.ecr.aws/bitnami/kafka:3.9.0
        environment:
          KAFKA_CFG_NODE_ID: 0
          KAFKA_CFG_PROCESS_ROLES: controller,broker
          KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
          KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
          KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@localhost:9093
          KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
          KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,EXTERNAL://localhost:9094
    working_directory: ~/repo
    steps:
      - checkout
      - check-if-tests-needed
      - pip-install-deps:
          requirements: "tests/requirements-kafka.txt"
      - run-tests-with-coverage-report:
          kafka: "true"
          tests: "tests/clients/kafka/test*.py"
      - store-pytest-results
      - store-coverage-report

workflows:
  version: 2
  build:
    jobs:
      - python38
      - python39
      - python310
      - python311
      - python312
      - python313
      - python314
      - py39cassandra
      - py39gevent_starlette
      - py312aws
      - py312kafka
      - final_job:
          requires:
            - python38
            - python39
            - python310
            - python311
            - python312
            - python313
            # Uncomment the following when giving real support to 3.14
            # - python314
            - py39cassandra
            - py39gevent_starlette
            - py312aws
