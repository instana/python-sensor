version: 2.1

# More about orbs: https://circleci.com/docs/2.0/using-orbs/
# orbs:
#   ruby: circleci/ruby@1.1.2

commands:
  pip-install-deps:
    parameters:
      requirements:
        default: "tests/requirements.txt"
        type: string
    steps:
      - run:
          name: Install Python Dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install 'wheel>=0.29.0'
            pip install -r requirements.txt
            pip install -r <<parameters.requirements>>

  install-couchbase-deps:
    steps:
      - run:
          name: Install Couchbase Dependencies
          # Even if we use focal, we need to add the bionic repo
          # See: https://forums.couchbase.com/
          # t/installing-libcouchbase-dev-on-ubuntu-20-focal-fossa/25955/3
          command: |
            sudo apt update
            sudo wget -O - http://packages.couchbase.com/ubuntu/couchbase.key | sudo apt-key add -
            echo "deb http://packages.couchbase.com/ubuntu bionic bionic/main" | sudo tee /etc/apt/sources.list.d/couchbase.list
            sudo apt update
            sudo apt install libcouchbase-dev -y

  run-tests-with-coverage-report:
    parameters:
      cassandra:
        default: ""
        type: string
      couchbase:
        default: ""
        type: string
      gevent:
        default: ""
        type: string
      tests:
        default: "tests"
        type: string
    steps:
      - run:
          name: Run Tests With Coverage Report
          environment:
            INSTANA_TEST: "true"
            CASSANDRA_TEST: "<<parameters.cassandra>>"
            COUCHBASE_TEST: "<<parameters.couchbase>>"
            GEVENT_STARLETTE_TEST: "<<parameters.gevent>>"
          command: |
            . venv/bin/activate
            coverage run --source=instana -m pytest -v --junitxml=test-results <<parameters.tests>>
            coverage report -m
            coverage html
            mkdir coverage_results
            cp -R .coverage coverage_results/.coverage.${CIRCLE_BUILD_NUM}
            cd coverage_results
      - persist_to_workspace:
          root: .
          paths:
            - coverage_results

  store-pytest-results:
    steps:
      - store_test_results:
          path: test-results
  
  run_sonarqube:
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install Java
          command: |
            sudo apt-get update
            sudo apt-get install openjdk-11-jdk
      - run:
          name: Run SonarQube to report the coverage
          command: |
            . venv/bin/activate
            coverage combine ./coverage_results
            coverage xml -i
            wget -O /tmp/sonar-scanner-cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.1.3023.zip
            unzip -d /tmp /tmp/sonar-scanner-cli.zip
            if [[ -n "${CIRCLE_PR_NUMBER}" ]]; then
              /tmp/sonar-scanner-4.8.1.3023/bin/sonar-scanner \
                -Dsonar.host.url=${SONARQUBE_URL} \
                -Dsonar.login="${SONARQUBE_LOGIN}" \
                -Dsonar.pullrequest.key="${CIRCLE_PR_NUMBER}" \
                -Dsonar.pullrequest.branch="${CIRCLE_BRANCH}"
            else
              /tmp/sonar-scanner-4.8.1.3023/bin/sonar-scanner \
                -Dsonar.host.url=${SONARQUBE_URL} \
                -Dsonar.login="${SONARQUBE_LOGIN}" \
                -Dsonar.branch.name="${CIRCLE_BRANCH}"
            fi
      - store_artifacts:
          path: htmlcov

  store-coverage-report:
    steps:
      - store_artifacts:
          path: htmlcov

jobs:
  python38:
    docker:
      - image: cimg/python:3.8
      - image: cimg/postgres:9.6.24
        environment:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: passw0rd
          POSTGRES_DB: instana_test_db
      - image: cimg/mariadb:10.11.2
        environment:
          MYSQL_ROOT_PASSWORD: passw0rd
          MYSQL_DATABASE: instana_test_db
      - image: cimg/redis:5.0.14
      - image: rabbitmq:3.9.13
      - image: mongo:4.2.3
      - image: vanmoof/pubsub-emulator
    working_directory: ~/repo
    steps:
      - checkout
      - pip-install-deps
      - run-tests-with-coverage-report
      - store-pytest-results
      - store-coverage-report

  python39:
    docker:
      - image: cimg/python:3.9
      - image: cimg/postgres:9.6.24
        environment:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: passw0rd
          POSTGRES_DB: instana_test_db
      - image: cimg/mariadb:10.11.2
        environment:
          MYSQL_ROOT_PASSWORD: passw0rd
          MYSQL_DATABASE: instana_test_db
      - image: cimg/redis:5.0.14
      - image: rabbitmq:3.9.13
      - image: mongo:4.2.3
      - image: vanmoof/pubsub-emulator
    working_directory: ~/repo
    steps:
      - checkout
      - pip-install-deps
      - run-tests-with-coverage-report
      - store-pytest-results
      - store-coverage-report

  python310:
    docker:
      - image: cimg/python:3.10
      - image: cimg/postgres:9.6.24
        environment:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: passw0rd
          POSTGRES_DB: instana_test_db
      - image: cimg/mariadb:10.11.2
        environment:
          MYSQL_ROOT_PASSWORD: passw0rd
          MYSQL_DATABASE: instana_test_db
      - image: cimg/redis:5.0.14
      - image: rabbitmq:3.9.13
      - image: mongo:4.2.3
      - image: vanmoof/pubsub-emulator
    working_directory: ~/repo
    steps:
      - checkout
      - pip-install-deps:
          requirements: "tests/requirements-310.txt"
      - run-tests-with-coverage-report
      - store-pytest-results
      - store-coverage-report

  python311:
    docker:
      - image: cimg/python:3.11
      - image: cimg/postgres:9.6.24
        environment:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: passw0rd
          POSTGRES_DB: instana_test_db
      - image: cimg/mariadb:10.11.2
        environment:
          MYSQL_ROOT_PASSWORD: passw0rd
          MYSQL_DATABASE: instana_test_db
      - image: cimg/redis:5.0.14
      - image: rabbitmq:3.9.13
      - image: mongo:4.2.3
      - image: vanmoof/pubsub-emulator
    working_directory: ~/repo
    steps:
      - checkout
      - pip-install-deps:
          requirements: "tests/requirements-310.txt"
      - run-tests-with-coverage-report
      - store-pytest-results
      - store-coverage-report

  python312:
    docker:
      - image: cimg/python:3.12
      - image: cimg/postgres:9.6.24
        environment:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: passw0rd
          POSTGRES_DB: instana_test_db
      - image: cimg/mariadb:10.11.2
        environment:
          MYSQL_ROOT_PASSWORD: passw0rd
          MYSQL_DATABASE: instana_test_db
      - image: cimg/redis:5.0.14
      - image: rabbitmq:3.9.13
      - image: mongo:4.2.3
      - image: vanmoof/pubsub-emulator
    working_directory: ~/repo
    steps:
      - checkout
      - pip-install-deps:
          requirements: "tests/requirements-312.txt"
      - run-tests-with-coverage-report
      - store-pytest-results
      - store-coverage-report

  python313:
    docker:
      - image: python:3.13.0rc1-bookworm
      - image: cimg/postgres:9.6.24
        environment:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: passw0rd
          POSTGRES_DB: instana_test_db
      - image: cimg/mariadb:10.11.2
        environment:
          MYSQL_ROOT_PASSWORD: passw0rd
          MYSQL_DATABASE: instana_test_db
      - image: cimg/redis:5.0.14
      - image: rabbitmq:3.9.13
      - image: mongo:4.2.3
      - image: vanmoof/pubsub-emulator
    working_directory: ~/repo
    steps:
      - checkout
      - pip-install-deps:
          requirements: "tests/requirements-313.txt"
      - run-tests-with-coverage-report
      - store-pytest-results
      - store-coverage-report

  py39couchbase:
    docker:
      - image: cimg/python:3.9
      - image: couchbase/server-sandbox:5.5.0
    working_directory: ~/repo
    steps:
      - checkout
      - install-couchbase-deps
      - pip-install-deps:
          requirements: "tests/requirements-couchbase.txt"
      - run-tests-with-coverage-report:
          couchbase: "true"
          tests: "tests/clients/test_couchbase.py"
      - store-pytest-results
      - store-coverage-report

  py39cassandra:
    docker:
      - image: cimg/python:3.9
      - image: cassandra:3.11
        environment:
          MAX_HEAP_SIZE: 2048m
          HEAP_NEWSIZE: 512m
    working_directory: ~/repo
    steps:
      - checkout
      - pip-install-deps:
          requirements: "tests/requirements-cassandra.txt"
      - run-tests-with-coverage-report:
          cassandra: "true"
          tests: "tests/clients/test_cassandra-driver.py"
      - store-pytest-results
      - store-coverage-report

  final_job:
    docker:
      - image: cimg/python:3.8.17
    working_directory: ~/repo
    steps:
      - checkout
      - pip-install-deps:
            requirements: "tests/requirements.txt"
      - store-pytest-results
      - run_sonarqube

  py39gevent_starlette:
    docker:
      - image: cimg/python:3.9.17
    working_directory: ~/repo
    steps:
      - checkout
      - pip-install-deps:
          requirements: "tests/requirements-gevent-starlette.txt"
      - run-tests-with-coverage-report:
          gevent: "true"
          tests: "tests/frameworks/test_gevent.py tests/frameworks/test_starlette.py"
      - store-pytest-results
      - store-coverage-report

workflows:
  version: 2
  build:
    jobs:
      - python38
      - python39
      - python310
      - python311
      - python312
      - python313
      - py39cassandra
      - py39couchbase
      - py39gevent_starlette
      - final_job:
          requires:
            - python38
            - python39
            - python310
            - python311
            - python312
            - python313
            - py39cassandra
            - py39couchbase
            - py39gevent_starlette
          filters:
            branches:
              only: master
